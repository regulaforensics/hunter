# Copyright (c) 2013, 2015 Ruslan Baratov
# All rights reserved.

cmake_minimum_required(VERSION 3.5)
project(Hunter)

include(ExternalProject) # ExternalProject_Add

# Scheme for download and install OpenSSL iOS library

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(hunter_dump_cmake_flags)
include(hunter_status_debug)
include(hunter_assert_not_empty_string)
include(hunter_unsetvar)

hunter_status_debug("Scheme: url_sha1_openssl_ios")

# Check preconditions
hunter_assert_not_empty_string("@HUNTER_SELF@")
hunter_assert_not_empty_string("@HUNTER_EP_NAME@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_URL@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_SHA1@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_INSTALL_PREFIX@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_LICENSE_DIR@")
hunter_assert_not_empty_string("@HUNTER_GLOBAL_SCRIPT_DIR@")
hunter_assert_not_empty_string("@HUNTER_TLS_VERIFY@")

# Note: support for single architecture/native iOS builds (i.e., arm64)
hunter_assert_not_empty_string("@IPHONEOS_ARCHS@@IPHONESIMULATOR_ARCHS@")
hunter_assert_not_empty_string("@IOS_SDK_VERSION@")
hunter_assert_not_empty_string("@IPHONESIMULATOR_ROOT@")
hunter_assert_not_empty_string("@IPHONEOS_ROOT@")

hunter_dump_cmake_flags(SKIP_INCLUDES SKIP_DEPLOYMENT_TARGET)
# -> CMAKE_CXX_FLAGS
# -> CMAKE_C_FLAGS

string(REGEX REPLACE "^ " "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

hunter_unsetvar(ssl_input_libraries)
hunter_unsetvar(crypto_input_libraries)

set(configure_opts threads no-shared)
# Pass C flags through
set(configure_opts ${configure_opts} ${CMAKE_C_FLAGS})

list(APPEND iphoneos_archs @IPHONEOS_ARCHS@)
list(APPEND iphonesimulator_archs @IPHONESIMULATOR_ARCHS@)

macro(__setup_lipo_input _platform _archs)
  message(STATUS "lipo ${_platform}-${_archs}")
  foreach(arch IN ITEMS ${_archs})
    list(
        APPEND
        ssl_input_libraries
        "@HUNTER_PACKAGE_SOURCE_DIR@/${_platform}-${arch}/libssl.a"
    )
    list(
        APPEND
        crypto_input_libraries
        "@HUNTER_PACKAGE_SOURCE_DIR@/${_platform}-${arch}/libcrypto.a"
    )
    message(STATUS " - lipo add ${_platform}-${arch}")
  endforeach()
endmacro()

if(iphoneos_archs)
  __setup_lipo_input(iphoneos "${iphoneos_archs}")
endif()

if(iphonesimulator_archs)
  __setup_lipo_input(iphonesimulator "${iphonesimulator_archs}")
endif()


# fuse all libraries by 'lipo'
ExternalProject_Add(
    "@HUNTER_EP_NAME@-ios_universal"
    DOWNLOAD_COMMAND
    ""
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    TLS_VERIFY
    "@HUNTER_TLS_VERIFY@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@/ios_universal"
    INSTALL_DIR
    "@HUNTER_PACKAGE_INSTALL_PREFIX@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ""
    BUILD_COMMAND
    ""
    INSTALL_COMMAND
    lipo
    -create
    ${ssl_input_libraries}
    -o
    "@HUNTER_PACKAGE_INSTALL_PREFIX@/lib/libssl.a"
    COMMAND
    lipo
    -create
    ${crypto_input_libraries}
    -o
    "@HUNTER_PACKAGE_INSTALL_PREFIX@/lib/libcrypto.a"
)

macro(__setup_platform _platform _archs)
  string(COMPARE EQUAL "${_platform}" "iphoneos" is_iphoneos)
  string(COMPARE EQUAL "${_platform}" "iphonesimulator" is_iphonesimulator)
  message(STATUS "platform ${_platform}-${_archs}")
  foreach(arch IN ITEMS ${_archs})
    if(_platform STREQUAL "iphoneos")
      set(CROSS_TOP "@IPHONEOS_ROOT@")
      set(CROSS_SDK "iPhoneOS@IOS_SDK_VERSION@.sdk")
    elseif(_platform STREQUAL "iphonesimulator")
      set(CROSS_TOP "@IPHONESIMULATOR_ROOT@")
      set(CROSS_SDK "iPhoneSimulator@IOS_SDK_VERSION@.sdk")
    endif()

    if(arch MATCHES "arm|armv7")
      set(target "ios-cross")
    endif()

    if(arch MATCHES "arm64")
      set(target "iossimulator-xcrun")
    endif()

    if(arch MATCHES "i386")
      set(target "darwin-i386-cc")
    endif()

    if(arch MATCHES "x86_64")
      if(is_iphoneos)
        set(target "darwin64-x86_64-cc")
      else()
        set(target "iossimulator-xcrun")
      endif()
      # set_key.c:398:17: error: unsupported inline asm:
      # input with type 'unsigned long' matching output with type 'unsigned int'
      set(configure_opts ${configure_opts} "no-asm")
    endif()

    ExternalProject_Add(
        "@HUNTER_EP_NAME@-${_platform}-${arch}"
        URL
        @HUNTER_PACKAGE_URL@
        URL_HASH
        SHA1=@HUNTER_PACKAGE_SHA1@
        DOWNLOAD_DIR
        "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
        TLS_VERIFY
        "@HUNTER_TLS_VERIFY@"
        SOURCE_DIR
        "@HUNTER_PACKAGE_SOURCE_DIR@/${_platform}-${arch}"
        INSTALL_DIR
        "@HUNTER_PACKAGE_INSTALL_PREFIX@"
            # not used, just avoid creating Install/<name> empty directory
        CONFIGURE_COMMAND
        ./Configure
        "${target}"
        "${configure_opts}"
        "no-async"
        "--prefix=@HUNTER_PACKAGE_INSTALL_PREFIX@"
        "--libdir=lib"
        "-arch ${arch}"
        "-isysroot ${CMAKE_OSX_SYSROOT}"
        BUILD_COMMAND
        . "@HUNTER_GLOBAL_SCRIPT_DIR@/clear-all.sh" &&
        export CROSS_TOP=${CROSS_TOP} &&
        export CROSS_SDK=${CROSS_SDK} &&
        make
        BUILD_IN_SOURCE
        1
        INSTALL_COMMAND
        make install_sw
            # installed libraries will be rewrited,
            # other files are equal
        COMMAND # Copy license files
        "@CMAKE_COMMAND@"
        "-C@HUNTER_ARGS_FILE@" # for 'HUNTER_INSTALL_LICENSE_FILES'
        "-Dsrcdir=@HUNTER_PACKAGE_SOURCE_DIR@/${_platform}-${arch}"
        "-Ddstdir=@HUNTER_PACKAGE_LICENSE_DIR@"
        -P
        "@HUNTER_SELF@/scripts/try-copy-license.cmake"
    )

    add_dependencies(
        "@HUNTER_EP_NAME@-ios_universal"
        "@HUNTER_EP_NAME@-${_platform}-${arch}"
    )

    message(STATUS " - build add ${_platform}-${arch}")
  endforeach()
endmacro()


if(iphoneos_archs)
  __setup_platform(iphoneos "${iphoneos_archs}")
endif()

if(iphonesimulator_archs)
  __setup_platform(iphonesimulator "${iphonesimulator_archs}")
endif()

